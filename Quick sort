/* C implementation QuickSort */
#include<stdio.h>

void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
int partition (int arr[], int l, int h)
{
  int x = arr[h];
    int i = (l - 1);
 
    for (int j = l; j <= h- 1; j++)
    {
        if (arr[j] <= x)
        {
            i++;
            swap (&arr[i], &arr[j]);
        }
    }
    swap (&arr[i + 1], &arr[h]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high)
{
       if (low < high)
    {
       
        int pi = partition(arr, low, high);
             
       quickSort(arr, low, pi - 1);
  
         quickSort(arr, pi + 1, high);
      
                 
    }

}
void printArray(int arr[],int start, int size)
{
    int i;
    for (i=start; i <= size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
 
int main()
{
    int n,arr[100];
    scanf("%d",&n);
    for(int i =0;i<n;i++){
        scanf("%d",&arr[i]);}
    quickSort(arr, 0, n-1);
    printf("Sorted array: \n");
  printArray(arr,0,n-1);
    return 0;
}
