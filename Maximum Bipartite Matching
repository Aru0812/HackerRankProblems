#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>
#define NIL 0
#define INF INT_MAX
 

struct QNode
{
    int key;
    struct QNode *next;
};
struct Queue
{
    struct QNode *front, *rear;
};
struct QNode* newNode(int k)
{
    struct QNode *temp = (struct QNode*)malloc(sizeof(struct QNode));
    temp->key = k;
    temp->next = NULL;
    return temp; 
}
struct Queue *createQueue()
{
    struct Queue *q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = q->rear = NULL;
    return q;
}
void enQueue(struct Queue *q, int k)
{
    struct QNode *temp = newNode(k);
    if (q->rear == NULL)
    {
       q->front = q->rear = temp;
       return;
    }
    q->rear->next = temp;
    q->rear = temp;
}
struct QNode *deQueue(struct Queue *q)
{
    if (q->front == NULL)
       return NULL;
    struct QNode *temp = q->front;
    q->front = q->front->next;
    if (q->front == NULL)
       q->rear = NULL;
    return temp;
}
struct AdjListNode
{
    int dest;
    struct AdjListNode* next;
};
struct AdjList
{
    struct AdjListNode *head;  // pointer to head node of list
};
struct BipGraph
{
    int m,n;
    struct AdjList* array;
};
struct AdjListNode* newAdjListNode(int dest)
{
    struct AdjListNode* newNode =
            (struct AdjListNode*) malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}
struct BipGraph* createBipGraph(int m,int n)
{
    struct BipGraph* bipgraph = (struct BipGraph*) malloc(sizeof(struct BipGraph));
    bipgraph->m = m;
    bipgraph->n = n;
    bipgraph->array = (struct AdjList*) malloc(m* sizeof(struct AdjList));
    bipgraph->array = (struct AdjList*) malloc(n* sizeof(struct AdjList));
    int i;
    for (i = 0; i < m+1; ++i)
        bipgraph->array[i].head = NULL;
    
    return bipgraph;
}
void addEdge(struct BipGraph* bipgraph, int src, int dest)
{   struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = bipgraph->array[src].head;
    bipgraph->array[src].head = newNode;
 
  newNode = newAdjListNode(src);
    newNode->next = bipgraph->array[dest].head;
bipgraph->array[dest].head = newNode;
 }

 bool BFS(struct BipGraph* bipgraph,int pU[],int pV[],int dist[])
     {
     int i;
     struct AdjListNode* j;
     struct AdjListNode* pCrawl;
      struct Queue *q = createQueue();
            for (int u=1; u<=bipgraph->m; u++)
           {
            if (pU[u]==NIL)
                {
                dist[u] = 0;
            enQueue(q,u);
            }
            else dist[u] = INF;
       }
      dist[NIL] = INF;
      
       while(q->front!=NULL)
       {       
           struct QNode *l=deQueue(q);
          int u=l->key;
      
         if (dist[u] < dist[NIL])
		for(pCrawl = bipgraph->array[u].head;pCrawl!=NULL;pCrawl = pCrawl->next)
		{		
           int v=pCrawl->dest;
             if (dist[pV[v]] == INF)
            {  
                 dist[pV[v]] = dist[u] + 1;                 
                enQueue(q,pV[v]);
            }
	          }
            }
    return (dist[NIL] != INF);
     	    
}

int hopcroft(struct BipGraph* bipgraph)
    {
    int pU[bipgraph->m+1],pV[bipgraph->n+1],dist[bipgraph->m+1];
    for (int u=0; u<bipgraph->m; u++)
        pU[u] = NIL;
    for (int v=0; v<bipgraph->n; v++)
        pV[v] = NIL;
     int result = 0;
    while (BFS(bipgraph,pU,pV,dist))
    {
        // Find a free vertex
        for (int u=1; u<=bipgraph->m; u++)
 
            // If current vertex is free and there is
            // an augmenting path from current vertex
            if (pU[u]==NIL )
                result++;
    }
    return result;
    
}
int main()
    {
   int m, n,i,u,v;
     struct BipGraph* bipgraph = createBipGraph(m,n);
    //scanf("%d %d ",&m,&n);
    //for(i=0;i<m;i++)
       // scanf("%d %d " ,&u,&v);
       // addEdge(bipgraph,u,v);
    addEdge(bipgraph,0,1 );
		
	  
   int k= hopcroft(bipgraph);
    return 0;
}
